rtvs::debug_source("C:/1FabsRepo/StepIntoR/1PSDSwR/1PSDSwR/Script.R")
x
f(2)
f <- function(x) { x + 1 }
f(4)
a <- array(         data = 1:8,         dim = c(2, 2, 2)            )
a
a <- array(         data = 1:8,         dim = c(2,2,2)            ) a
a
#creating a data frame df <- data.frame(             Name = c("Cat", "Dog", "Cow", "Pig"),             HowMany = c(5, 10, 15, 20,             IsPet = c(TRUE, TRUE, FALSE, FALSE)                         )                  )
df
#creating a data frame df <- data.frame(             Name = c("Cat", "Dog", "Cow", "Pig"),             HowMany = c(5, 10, 15, 20),             IsPet = c(TRUE, TRUE, FALSE, FALSE)                         )                  )
#creating a data frame df <- data.frame(             Name = c("Cat", "Dog", "Cow", "Pig"),             HowMany = c(5, 10, 15, 20),             IsPet = c(TRUE, TRUE, FALSE, FALSE)                  )
df
setwd("C:/1FabsRepo/StepIntoR/1PSDSwR/data/m4")
cars <- read.csv("Cars.csv")
head(cars)
install.packages("dplyr", lib="C:/Program Files/Microsoft/R Client/R_SERVER/library")
table(cars$Transmission)
temp <- filter
temp <- filter()
temp <- filter()
temp2 <- filter()
temp = filter(               .data = temp,             Transmission == "Automatic"               )
temp = filter(               .data = cars,             Transmission == "Automatic"               )
head(cars)
myfilter <- filter(                    .data = cars,                  Transmission == "Automatic")
temp <- select()
temp = select(   .data = cars,   Transmission,   Cylinders,   Fuel.Economy               )
library(dplyr)
temp = select(   .data = cars,   Transmission,   Cylinders,   Fuel.Economy               )
head(temp)
temp <- filter(                .data = temp,               Transmission == "Automatic"                )
head(temp)
#Compute a new column. This is an example of Transform temp <- mutate(         .data = temp,         Consumption = Fuel.Economy * 0.425                ) #Inspect the results head(temp)
#Aggregare based on groups temp <- summarize(         .data = temp,         Avg.Consumption = mean(Consumption)) #check results head(temp)
#do a group by temp <- group_by(                  .data = temp,                  Cylenders) #check groupby values head(temp)
#do a group by temp <- group_by(                  .data = cars,                  Cylenders) #check groupby values head(temp)
#do a group by temp <- group_by(                  .data = cars,                  Cylinders) #check groupby values head(temp)
#Aggregare based on groups temp <- summarize(         .data = temp,         Avg.Consumption = mean(Consumption)) #check results head(temp)
#Aggregare based on groups temp <- summarize(         .data = temp,         Avg.Consumption = mean(Consumption)) #check results head(temp)
#Compute a new column. This is an example of Transform temp <- mutate(         .data = temp,         Consumption = Fuel.Economy * 0.425                ) #Inspect the results head(temp)
#do a group by temp <- group_by(                  .data = cars,                  Cylinders) #check groupby values head(temp)
#Aggregare based on groups temp <- summarize(         .data = temp,         Avg.Consumption = mean(Consumption)) #check results head(temp)
#Compute a new column. This is an example of Transform temp <- mutate(         .data = temp,         Consumption = Fuel.Economy * 0.425                ) #Inspect the results head(temp)
#Aggregare based on groups temp <- summarize(         .data = temp,         Avg.Consumption = mean(Consumption)) #check results head(temp)
#Arrante the rows in decending order temp <- arrange(                 .data = temp,                 desc(Avg.Consumption)) #check results head(temp)
#convert data back to a data frame efficiency <- as.data.frame(temp) #check the results for new variable efficiency print(efficiency)
>  #example of method chaining efficiency, - cars %>%     select(Fuel.economy, Cylinders, Transmission) %>%     filter(Transmission == "Automatic") %>%     group_by(Cylinders) %>%     summarise(Avg.Consumption = mean(Consumption)) %>%     as.data.frame() #check the results for new variable efficiency print(efficiency)
#example of method chaining efficiency, - cars %>%     select(Fuel.Economy, Cylinders, Transmission) %>%     filter(Transmission == "Automatic") %>%     group_by(Cylinders) %>%     summarise(Avg.Consumption = mean(Consumption)) %>%     as.data.frame() #check the results for new variable efficiency print(efficiency)
#example of method chaining efficiency <- cars %>%     select(Fuel.Economy, Cylinders, Transmission) %>%     filter(Transmission == "Automatic") %>%     group_by(Cylinders) %>%     summarise(Avg.Consumption = mean(Consumption)) %>%     as.data.frame() #check the results for new variable efficiency print(efficiency)
#example of method chaining efficiency <- cars %>%     select(Fuel.Economy, Cylinders, Transmission) %>%     filter(Transmission == "Automatic") %>%     mutate(Consumption = Fuel.Economy * 0.425) %>%     group_by(Cylinders) %>%     summarise(Avg.Consumption = mean(Consumption)) %>%     as.data.frame() #check the results for new variable efficiency print(efficiency)
#Export or the Load in ETL now #save the results to a CSV file write.csv(           x = efficiency,           file = "Fuel Efficiency.csv",           row.names = FALSE)
summary(cars)
library(ggplot2)
install.packages("ggplot2", lib="C:/Program Files/Microsoft/R Client/R_SERVER/library")
library(ggplot2)
# Create a frequency bar chart ggplot(     data = cars,     aes(x = Transmission)) +     geom_bar() +     ggtitle("Count of Cars by Transmission Type") +     xlab("Transmission Type") +     ylab("Count of Cars")
setwd("C:/1FabsRepo/StepIntoR/1PSDSwR/data/m4")
# Read a CSV data file cars <- read.csv("Cars.csv")
# Create a frequency bar chart ggplot(     data = cars,     aes(x = Transmission)) +     geom_bar() +     ggtitle("Count of Cars by Transmission Type") +     xlab("Transmission Type") +     ylab("Count of Cars")
# Create a histogram ggplot(     data = cars,     aes(x = Fuel.Economy)) +     geom_histogram(         bins = 10) +         ggtitle("Distribution of Fuel Economy") +         xlab("Fuel Economy (mpg)") +         ylab("Count of Cars")
# Create a density plot ggplot(     data = cars,     aes(x = Fuel.Economy)) +     geom_density() +     ggtitle("Distribution of Fuel Economy") +     xlab("Fuel Economy (mpg)") +     ylab("Density")
# Create a scatterplot ggplot(     data = cars,     aes(         x = Cylinders,         y = Fuel.Economy)) +         geom_point() +         ggtitle("Fuel Economy by Cylinders") +         xlab("Number of Cylinders") +         ylab("Fuel Economy (mpg)")
data(iris)
#check to see if its there head(iris)
# Create a scatterplot plot(     x = iris$Petal.Length[],     y = iris$Petal.Width[],     main = "Iris Petal Length vs. Width",     xlab = "Petal Length (cm)",     ylab = "Petal Width (cm)")
# Create a linear regression model model <- lm(     formula = Petal.Width ~ Petal.Length,     data = iris) # Summarize the model summary(model)
# Draw a regression line on plot lines(     x = iris$Petal.Length[],     y = model$fitted,     col = "red",     lwd = 3)
#get Correlation Coefficient corr(      x = iris$Petal.Length,      y= iris$Petal.Width)
#get Correlation Coefficient cor(      x = iris$Petal.Length,      y= iris$Petal.Width)
# Predict new values with the model predict(     object = model,     newdata = data.frame(         Petal.Length = c(2, 5, 7)))
data(iris)
head(iris)
# Create a scatterplot plot(     x = iris$Petal.Length[],     y = iris$Petal.Width[],     main = "Iris Petal Length vs. Width",     xlab = "Petal Length (cm)",     ylab = "Petal Width (cm)")
# Create a linear regression model model <- lm(     formula = Petal.Width ~ Petal.Length,     data = iris)
# Summarize the model summary(model)
# Draw a regression line on plot lines(     x = iris$Petal.Length[],     y = model$fitted,     col = "red",     lwd = 3)
